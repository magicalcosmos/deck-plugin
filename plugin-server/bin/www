#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app.js');
var debug = require('debug')('demo:server');
var http = require('http');
const WebSocket = require('ws');
const getImagePaths = require('../lib/index.js');
/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3909');
// app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app.callback());

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);
// 用于存储所有客户端连接的数组
const clients = [];
// 定义广播函数

// 创建 WebSocket 服务器
const wss = new WebSocket.Server({ server: server });
wss.on('connection', (ws) => {
  // 将新连接添加到数组中
  // clients.push(ws);
  console.log('WebSocket 连接已建立！');
  ws.on('message', async (message) => {
    const data = JSON.parse(message);
    if (data.cmd === 'getimagepaths') {
      const path = data.param.my_imagepath;
      const imagePaths = getImagePaths(path)
      ws.send(
        JSON.stringify({
          code: 0,
          paths:imagePaths,
        })
      );
    }
  });
  ws.on('error', (err) => {
    console.error('WebSocket error:', err);
  });
});
/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
